import numpy as np
import time
import os
from numpy import genfromtxt
import pandas as pd

################## start the timer #######################
start_time = time.time()

################## read the CSV files #######################
def getListOfFiles(dirName):
    # create a list of file and sub directories
    # names in the given directory
    listOfFile = os.listdir(dirName)
    allFiles = list()
    # Iterate over all the entries
    for entry in listOfFile:
        # Create full path
        fullPath = os.path.join(dirName, entry)
        # If entry is a directory then get the list of files in this directory
        if os.path.isdir(fullPath):
            allFiles = allFiles + getListOfFiles(fullPath)
        else:
            allFiles.append(fullPath)

    return allFiles
dirName = '/Users/georgedamoulakis/Desktop/excel2';
listOfFiles = getListOfFiles(dirName)
listOfFiles.sort()
L = (len(listOfFiles) - 1)
MatrixA_container = np.empty( (L,3), dtype = object)
the_real_MatrixA = np.empty((1,3), dtype=object)
G_Rate_BOX = np.empty(((L),), dtype=object)
################## how to find frame to frame growth rate #######################
for i in range(L):
    # edw ipirxe problima esbisa tin prwti grammi me ta logia giati to mperdeue
    M1 = genfromtxt(listOfFiles[i], delimiter=',', encoding= 'unicode_escape')
    #print(listOfFiles[i])
    #print(listOfFiles[i+1])
    M1 = np.delete(M1, (0), axis=0)
    #print(f"the {i} matrix is")
    #print(M1)
    M2 = genfromtxt(listOfFiles[i+1], delimiter=',', encoding= 'unicode_escape')
    M2 = np.delete(M2, (0), axis=0)
    #print(f"the {i+1} matrix is")
    #print(M2)
    #print("---------------")
    G_Rate_avg_list = []
    def G_Rate_function(M1, M2):
        M1_2col = np.empty((M1.shape[0], 2), dtype=float)
        for i in range(M1.shape[0]):
            M1_2col[i, 0] = M1[i, 0]
            M1_2col[i, 1] = M1[i, 1]
        M2_2col = np.empty((M2.shape[0], 2), dtype=float)
        for i in range(M2.shape[0]):
            M2_2col[i, 0] = M2[i, 0]
            M2_2col[i, 1] = M2[i, 1]
        # define the distance function:
        def distance(x1, y1, x2, y2):
            x_diff = (x1 - x2) ** 2
            y_diff = (y1 - y2) ** 2
            point_distance = (x_diff + y_diff) ** 0.5
            return point_distance
        #print("done measuring distances")
        distances_stored = np.empty((M1_2col.shape[0], M2_2col.shape[0]), dtype=object)
        for i in range(M1_2col.shape[0]):
            for j in range((M2_2col.shape[0])):
                d = distance(M1_2col[i][0], M1_2col[i][1], M2_2col[j][0], M2_2col[j][1])
                distances_stored[i][j] = round(d, 2)
        #print(distances_stored)
        mini = np.empty((M1_2col.shape[0], M2_2col.shape[0]), dtype=object)
        for i in range(M1_2col.shape[0]):
            for j in range((M2_2col.shape[0])):
                if distances_stored[i, j] == np.amin(distances_stored[i]):
                    mini[i, j] = distances_stored[i, j]
                else:
                    mini[i, j] = -1
        #print(mini)
        G_Rate_matrix = np.empty((M1.shape[0], 1), dtype=object)
        G_Rate_matrix_clean = []
        for i in range(M1_2col.shape[0]):
            for j in range((M2_2col.shape[0])):
                if mini[i, j] == -1:
                    pass
                else:
                    if mini[i, j] == 0:
                        pass
                        #print("nothing here")
                    elif mini[i, j] > 20:
                        pass
                        #print("we have but they are far")
                    else:
                        #print(M2[j][2])
                        #print(M1[i][2])
                        #print(i,j)
                        G_Rate_matrix[i] = ((M2[j][2] - M1[i][2]) / (M1[j][2]))
                        if (G_Rate_matrix[i] < 0) or (G_Rate_matrix[i] == 0):
                            pass
                        else:
                            G_Rate_matrix_clean.append(G_Rate_matrix[i])
        G_Rate_matrix_clean_array = np.array(G_Rate_matrix_clean, dtype= object)
        #print(G_Rate_matrix_clean_array)
        G_Rate_avg = np.mean(G_Rate_matrix_clean_array)
        #print(G_Rate_avg)
        return G_Rate_avg
    G_Rate_BOX[i] = G_Rate_function(M1, M2)
c1 = np.mean(G_Rate_BOX)
################## find average droplet number #######################
Total_Droplets_number  = 0
Total_Area = 0
for k in range(L+1):
    M = genfromtxt(listOfFiles[k], delimiter=',', encoding='unicode_escape')
    Total_Droplets_number = (Total_Droplets_number + M[1][3])
    Total_Area = (Total_Area + M[1][4])
c2 = Total_Droplets_number / (L+1)
c3 = Total_Area / (L+1)
################## store the data #######################
the_real_MatrixA[0][0] = round(c1, 3)
the_real_MatrixA[0][1] = round(c2, 3)
the_real_MatrixA[0][2] = round(c3, 3)
print('The real matrix A is:')
print(the_real_MatrixA)
print('-----------------------')
my_df_1 = pd.DataFrame( the_real_MatrixA  )
my_df_1.columns = ['0', '1', '2']
my_df_1.to_csv(f'The real Matrix A.csv', index=False)  # save as csv
################## kill the timer #######################
print("--- %s seconds ---" % (time.time() - start_time))
