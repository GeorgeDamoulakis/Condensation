from __future__ import print_function
from builtins import input
import cv2 as cv
import numpy as np
import argparse


def unsharp_mask(image, kernel_size=(9, 9), sigma=2.0, amount=2.0, threshold=0):
    """Return a sharpened version of the image, using an unsharp mask."""
    blurred = cv.GaussianBlur(image, kernel_size, sigma)
    sharpened = float(amount + 1) * image - float(amount) * blurred
    sharpened = np.maximum(sharpened, np.zeros(sharpened.shape))
    sharpened = np.minimum(sharpened, 255 * np.ones(sharpened.shape))
    sharpened = sharpened.round().astype(np.uint8)
    if threshold > 0:
        low_contrast_mask = np.absolute(image - blurred) < threshold
        np.copyto(sharpened, image, where=low_contrast_mask)
    return sharpened
def adjust_gamma(image, gamma=3.5):
	invGamma = 1.0 / gamma
	table = np.array([((i / 255.0) ** invGamma) * 255
		for i in np.arange(0, 256)]).astype("uint8")
	return cv.LUT(image, table)

image = cv.imread('C:\\SteamCondChamber\\imagesFXM24C15V25T41P1070\\image_500.tif', cv.IMREAD_COLOR)

############################################### this part is from
############################################### https://docs.opencv.org/3.4/d3/dc1/tutorial_basic_linear_transform.html

new_image = np.zeros(image.shape, image.dtype)
alpha = 1.0 # Simple contrast control
beta = 70    # Simple brightness control
for y in range(image.shape[0]):
    for x in range(image.shape[1]):
        for c in range(image.shape[2]):
            new_image[y,x,c] = np.clip(alpha*image[y,x,c] + beta, 0, 255)

############################################### this part is Gamma fixing
gamma_image = adjust_gamma(new_image, gamma=0.2)
#cv.imwrite("G_E_image_500.tif", gamma_image)
#cv.imshow("Initial", image)
#cv.imshow("Final", gamma_image)
#cv.waitKey(0)
#cv.destroyAllWindows()


############################################### this part is sobrel
###############################################  https://docs.opencv.org/3.4/d2/d2c/tutorial_sobel_derivatives.html
src = gamma_image
window_name = ('Sobel Demo - Simple Edge Detector')
scale = 1
delta = 0
ddepth = cv.CV_16S
src = cv.GaussianBlur(src, (3, 3), 0)
gray = cv.cvtColor(src, cv.COLOR_BGR2GRAY)
grad_x = cv.Sobel(gray, ddepth, 1, 0, ksize=3, scale=scale, delta=delta, borderType=cv.BORDER_DEFAULT)
# Gradient-Y
# grad_y = cv.Scharr(gray,ddepth,0,1)
grad_y = cv.Sobel(gray, ddepth, 0, 1, ksize=3, scale=scale, delta=delta, borderType=cv.BORDER_DEFAULT)
abs_grad_x = cv.convertScaleAbs(grad_x)
abs_grad_y = cv.convertScaleAbs(grad_y)
grad = cv.addWeighted(abs_grad_x, 0.5, abs_grad_y, 0.5, 0)

cv.imshow(window_name, grad)
cv.waitKey(0)

cv.imwrite("image_500.tif", image)
cv.imwrite("E_image_500.tif", new_image)
cv.imwrite("G_E_image_500.tif", gamma_image)
cv.imwrite("S_G_E_image_500.tif", grad)
